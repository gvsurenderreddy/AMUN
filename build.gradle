buildscript
{

    repositories
    {

        jcenter()

        maven
        {

            name = "forge"
            url = "http://files.minecraftforge.net/maven"

        }

    }

    dependencies
    {

        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'

    }

}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'net.minecraftforge.gradle.forge'

def __manifest = {

  attributes FMLCorePlugin: "de.puzzleddev.amun.common.core.preload.AmunFMLPlugin"
  attributes FMLCorePluginContainsFMLMod: "true"

}

jar
{

  manifest __manifest

}

ext.configFile = file("build.properties")

apply from: "$rootDir/gradle/scripts/common.gradle"

loadConfig('version_props', file("$projectDir/version.properties"))

ext.AMUN_version = "${version_props.major}.${version_props.minor}.${version_props.patch}"

version = "${config.MC_version}-${AMUN_version}"
group = "de.puzzleddev.amun"
archivesBaseName = "AMUN"

apply from: "$rootDir/gradle/scripts/archive.gradle"
apply from: "$rootDir/gradle/scripts/repositories.gradle"

ext.set('has_private', loadConfig('private_props', file("$projectDir/private.properties")))

repositories
{

  if(has_private)
  {

    maven
    {

        url private_props.maven_server

    }

  }

}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft
{

    version = config.MC_version + "-" + config.FORGE_version
    runDir = "run"

    mappings = "snapshot_20160312"
    makeObfSourceJar = false

    replace "@VERSION@", project.version
    replace "@MCVERSION@", config.MC_version

}

configurations
{

    deployerJars

}

dependencies
{

  deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"

	compile "org.luaj:luaj-jse:${config.LUAJ_version}"

	compile "org.codehaus.groovy:groovy:${config.GROOVY_version}"

	//compile "li.cil.oc:OpenComputers:MC${config.MC_version}-${config.OC_version}:api" //Wait until it gets updated to 1.9

	compile "mcp.mobius.waila:Waila:${config.WAILA_version}:dev"

	deobfCompile "mezz.jei:jei_${config.MC_version}:${config.JEI_version}"

}

processResources
{

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs)
    {

        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version

    }

    from(sourceSets.main.resources.srcDirs)
    {

        exclude 'mcmod.info'

    }
}

if(has_private)
{

  uploadArchives
  {

      repositories.mavenDeployer
      {

          configuration = configurations.deployerJars

          repository(url: private_props.maven_server)
          {

              authentication(userName: private_props.maven_name, password: private_props.maven_pass)

              pom.name = 'AMUN'

              pom.project
              {

                description "AMUN is a core mod that doesn't add anything itself, therefor \"The hidden one\" or AMUN in greek"

                developers
                {

                  developer
                  {

                    id 'tim4242'
                    name 'Tim4242'
                    email 'tim4242@gmx.de'

                    roles {

                      role 'developer'
                      role 'designer'

                    }

                    timezone 'Europe/Berlin'

                  }

                }

                licenses
                {

                  license
                  {

                    name 'Apache License, Version 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'

                  }

                }

              }

          }

      }

  }

}

def reloadVersion = { boolean rebuildStr = true ->

  version_props.toProperties().store(file("$projectDir/version.properties").newWriter(), null)

  if(rebuildStr)
  {

    ext.AMUN_version = "${version_props.major}.${version_props.minor}.${version_props.patch}"

    version = "${config.MC_version}-${AMUN_version}"

  }
}

task incrementMajorVersion <<
{
  version_props.major = (version_props.major.toInteger() + 1)
  version_props.minor = 0
  version_props.patch = 0

  reloadVersion();
}

task incrementMinorVersion <<
{
  version_props.minor = (version_props.minor.toInteger() + 1)
  version_props.patch = 0

  reloadVersion();
}

task incrementPatchVersion <<
{
  version_props.patch = (version_props.patch.toInteger() + 1)

  reloadVersion();
}

build.shouldRunAfter(incrementMajorVersion)
build.shouldRunAfter(incrementMinorVersion)
build.shouldRunAfter(incrementPatchVersion)

makeSrcJar.shouldRunAfter(incrementMajorVersion)
makeSrcJar.shouldRunAfter(incrementMinorVersion)
makeSrcJar.shouldRunAfter(incrementPatchVersion)
